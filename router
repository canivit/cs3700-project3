#!/usr/bin/env python3

import argparse, socket, json, select, copy

DEBUG = True
#DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('asn', type=int, help="AS Number")
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None

    def __init__(self, asn, networks):
        self.asn = asn
        self.routes = []
        self.updates = []
        self.relations = {}
        self.sockets = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG: 
                print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return
    
    def apply_subnetmask(self, destination, netmask):
        """	applies the subnet mask to the destination ip """
        destination_segments = destination.split('.')
        netmask_segments = netmask.split('.')
        ip = ''
        for i in range(len(netmask_segments)):
            ip_segment = int(destination_segments[i])
            mask_segment = int(netmask_segments[i])
            new_segment = ip_segment & mask_segment
            ip = ip + str(new_segment) + '.'
        ip = ip[0:-1]
        return ip

    def count_matching_segment(self, ip1, ip2):
        """ counts the number of matching segments in two ip adresses """
        ip1_segments = ip1.split('.')
        ip2_segments = ip2.split('.')
        count = 0
        for i in range(len(ip1_segments)):
            if ip1_segments[i] == ip2_segments[i]:
                count += 1
        return count

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        matching_routes = []
        # go thorugh every row in the routing table
        for row in self.routes:
            # apply the subnetmask to the destination ip
            masked_ip = self.apply_subnetmask(daddr, row[NMSK])
            # if the masked ip matches the ip in the routing table add the row to the matching rows
            if masked_ip == row[NTWK]:
                matching_routes.append(row)
        return matching_routes
        # longest = float('-inf')
        # # go through every row in the matching destination networks to find the longest matching segments count
        # for row in matching_routes:
        #     longest = max(longest, self.count_matching_segment(daddr, row[NTWK]))
        # outroutes = []
        # # go through every row in the matching destination networks and add the ones with the longest 
        # # prefix match to the outroutes
        # for row in matching_routes:
        #     if self.count_matching_segment(daddr, row[NTWK]) == longest:
        #         outroutes.append(row)
        # return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        outroutes = []
        shortest_length = float('inf')
        # go thorugh every row in the given routing table and find the minimum AS path
        for row in routes:
            shortest_length = min(shortest_length, len(row[APTH]))
        # go through every row in the given routing table and add the ones with shortest AS path to the list
        for row in routes:
            if len(row[APTH]) == shortest_length:
                outroutes.append(row)
        return outroutes
            
    def get_highest_preference(self, routes):
        """ select the route with the highest local preference """
        highest_pref = float('-inf')
        for row in routes:
            highest_pref = max(highest_pref, row[LPRF])
        outroutes = []
        for row in routes:
            if row[LPRF] == highest_pref:
                outroutes.append(row)
        return outroutes
         
    def get_self_origin(self, routes):
        """ select self originating routes """
        outroutes = []
        for row in routes:
            if row[SORG]:
                outroutes.append(row)
        if len(outroutes) > 0:
            return outroutes
        return routes

    def get_origin_routes(self, routes):
        """ select origin routes: IGP > EGP > UNK """
        best_origin = 'UNK'
        for row in routes:
            if best_origin == 'UNK' and row[ORIG] == 'EGP':
                best_origin = 'EGP'
            elif best_origin == 'EGP' and row[ORIG] == 'IGP':
                best_origin = 'IGP'
        outroutes = []
        for row in routes:
            if row[ORIG] == best_origin:
                outroutes.append(row)
        return outroutes
    
    def compare_ip(self, ip1, ip2):
        """ compares to ip adresses """
        ip1_segments = ip1.split('.')
        ip2_segments = ip2.split('.')
        for i in range(len(ip1_segments)):
            value1 = int(ip1_segments[i])
            value2 = int(ip1_segments[i])
            if value1 != value2:
                return value1 - value2
        return 0
    
    def get_lowest_ip(self, routes):
        """ select lowest ip """
        outroutes = []
        min_ip = routes[0][PEER]
        for row in routes:
            self.compare_ip(row[PEER], min_ip) < 0
            min_ip = row[PEER]
        for row in routes:
            if row[PEER] == min_ip:
                outroutes.append(row)
        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        return routes

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        routes = self.lookup_routes(daddr)
        # 1. Highest Preference
        routes = self.get_highest_preference(routes)
        # 2. Self Origin
        routes = self.get_self_origin(routes)
        # 3. Shortest ASPath
        routes = self.get_shortest_as_path(routes)
        # 4. IGP > EGP > UNK
        routes = self.get_origin_routes(routes)
        # 5. Lowest IP Address
        routes = self.get_lowest_ip(routes)
        # Final check: enforce peering relationships
        routes = self.filter_relationships(srcif, routes)
        if routes:
            return routes[0][PEER]
        return None

    def forward(self, srcif, packet):
        peer = self.get_route(srcif, packet[DEST])
        if peer is None:
            return False
        socket = self.sockets[peer]
        socket.send(json.dumps(packet).encode())
        if DEBUG:
            print('FORWARD TO %s: %s' % (peer, packet))
        return True

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False

    def get_router_ip(self, ip):
        return ip[0:-1] + '1'

    def update(self, srcif, packet):
        """	handle update packets	"""
        
        # save it for later use
        self.updates.append(packet) 

        # update the routing table
        row = copy.deepcopy(packet[MESG])
        row[PEER] = packet[SRCE]
        self.routes.append(row)

        # send copies of the announcement to neighboring routers
        neighbors = self.sockets.keys()
        for neighbor in neighbors:
            # dont't send an announcement to the neighbor who sent this to us          
            if(neighbor != packet[SRCE]):
                cp = copy.deepcopy(packet)
                # change the source and destination fields
                cp[SRCE] = self.get_router_ip(neighbor)
                cp[DEST] = neighbor
                # append ourselves to the ASPath
                cp[MESG][APTH].append(self.asn)
                socket = self.sockets[neighbor]
                socket.send(json.dumps(cp).encode())
                if DEBUG:
                    print('ANNOUNCE UPDATE TO %s: %s' % (neighbor ,cp))

        return True
    
    def revoke(self, packet):
        """	handle revoke packets	"""
        # TODO
        return True

    def dump(self, packet):
        """	handles dump table requests	"""
        table_message = {}
        table_message[SRCE] = packet[DEST]
        table_message[DEST] = packet[SRCE]
        table_message[TYPE] = TABL
        table = []
        for row in self.routes:
            table_row = {}
            table_row[NTWK] = row[NTWK]
            table_row[NMSK] = row[NMSK]
            table_row[PEER] = row[PEER]
            table.append(table_row)
        table_message[MESG] = table
        socket = self.sockets[packet[SRCE]]
        socket.send(json.dumps(table_message).encode())
        if DEBUG:
            print('SEND TABLE: %s' % table_message)
        return True

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        if DEBUG:
            print('RECEIVED: %s' % packet)
        
        type = packet[TYPE]
        # if this packet is route update message
        if type == UPDT:
            return self.update(srcif, packet)
        elif type == DATA:
            return self.forward(srcif, packet)
        elif type == DUMP:
            return self.dump(packet)
            
        return False

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        return

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return

if __name__ == "__main__":
    router = Router(args.asn, args.networks)
    router.run()
